# GitHub Actions workflow for automated testing and deployment
name: Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask
    
    - name: Create necessary directories
      run: |
        mkdir -p uploads static/data backups templates
    
    - name: Run tests
      run: |
        # Add your tests here when available
        python -c "import app; print('App imports successfully')"
    
    - name: Check code quality
      run: |
        pip install flake8 black
        # Run flake8 for linting (ignore line length)
        flake8 app.py --max-line-length=120 --ignore=E501 || true
        # Check formatting with black
        black --check app.py || true

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        # Trigger deploy hook on Render
        curl -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${RENDER_API_KEY}" \
          "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys"
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Check deployment health
      run: |
        # Check if the health endpoint responds
        max_attempts=10
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          if curl -f https://${{ secrets.RENDER_APP_URL }}/api/health; then
            echo "Deployment successful!"
            exit 0
          fi
          
          echo "Attempt $((attempt + 1))/$max_attempts failed. Waiting..."
          sleep 30
          attempt=$((attempt + 1))
        done
        
        echo "Deployment health check failed"
        exit 1

  notify:
    name: Notify Deployment Status
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, email, etc.)
    
    - name: Notify failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here